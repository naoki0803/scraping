const PORT = 3000;

const express = require("express");
const axios = require("axios");
const cheerio = require("cheerio");
const app = express();
require('dotenv').config();

/*------------------------------------
/   スクレイピングに関する記述
------------------------------------*/
//WEBスクレイパーを作成
const URL = "https://search.rakuten.co.jp/search/mall/メガネ";    //スクレイピングしたいページ(今回は楽天のメガネを検索したページ)
const data = [];

axios(URL)
    .then((res) => {
        const htmlParser = res.data; //リクエストしたUTLのHTMLが格納される
        // console.log(htmlParser);

        const $ = cheerio.load(htmlParser); // cheerioの慣例で$に代入する

        $(".searchresultitem", htmlParser).each(function () {   //スクレイピング先ページのパターンを見つけて、セレクターを指定して、取得した結果をdata配列に格納する
            const title = $(this).find("h2").text();
            const price = $(this).find(".price--OX_YW").text();
            data.push({ title, price });
        })
        // console.log(data);
    })
    .catch(error => console.log(error));


/*------------------------------------
/ Google Spreadsheet
------------------------------------*/


//  以下サイトを参考に、再度 spreadSheetの読み込みを実施するも古くてできず。
//  https://www.twilio.com/ja/blog/load-data-from-google-spreadsheet-jp
        // 'use strict';
        // require('dotenv').config();
        // const { GoogleSpreadsheet } = require('google-spreadsheet');  //元々Webで紹介されているコードのコード
        // // const {GoogleSpreadsheet} = require('googleapis');

        // // Googleスプレッドシートから情報をロード
        // async function loadsheet() {
        //     // スプレッドシートIDと資格情報を用いてGoogleスプレッドシートをロード
        //     const doc = new GoogleSpreadsheet(process.env.SPREADSHEET_ID);
        //     const credentials = require('./credentials.json');
        //     await doc.useServiceAccountAuth(credentials);   //useServiceAccountAuthが存在しない関数とエラー。右記記事でその関数古いと記載あり　→ https://stackoverflow.com/questions/76910780/typeerror-doc-useserviceaccountauth-is-not-a-function
        //     await doc.loadInfo();

        //     //情報を取得
        //     const sheetData = await doc.sheetsById[process.env.WORKSHEET_ID];
        //     const dataRows = await sheetData.getRows();

        //     return dataRows;
        // }


        // loadsheet()
        //     .then ( dataRows => console.log(dataRows))
        //     .catch( err => console.log("エラーですね・・・・", err));



//  npmの公式ページを参考にコードを記述
//  https://www.npmjs.com/package/google-spreadsheet?activeTab=readme
//  ↓
//  awaitが不思議な記述になってて、右記記述でエラーになる    // await doc.loadInfo(); // loads document properties and worksheets


    
    // const { GoogleSpreadsheet } = require('google-spreadsheet') //公式だとimportとfromを利用してるけどエラーなのでrequireを実施　 公式のコード→　import { GoogleSpreadsheet } = from 'google-spreadsheet';
    // const { JWT } = require('google-auth-library')


    // (async function() {
    //   await someAsyncFunction();
      
    // }());



    // // Initialize auth - see https://theoephraim.github.io/node-google-spreadsheet/#/guides/authentication
    // const serviceAccountAuth = new JWT({
    //   // env var values here are copied from service account credentials generated by google
    //   // see "Authentication" section in docs for more info
    //   email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
    //   key: process.env.GOOGLE_PRIVATE_KEY,
    //   scopes: [
    //     'https://www.googleapis.com/auth/spreadsheets',
    //   ],
    // });

    // const doc = new GoogleSpreadsheet(process.env.SPREADSHEET_ID, serviceAccountAuth);

    // await doc.loadInfo(); // loads document properties and worksheets
    // console.log(doc.title);
    // await doc.updateProperties({ title: 'renamed doc' });

    // const sheet = doc.sheetsByIndex[0]; // or use `doc.sheetsById[id]` or `doc.sheetsByTitle[title]`
    // console.log(sheet.title);
    // console.log(sheet.rowCount);

    // // adding / removing sheets
    // const newSheet = await doc.addSheet({ title: 'another sheet' });
    // await newSheet.delete();





/*------------------------------------
/   スプレッドシートの情報取得

以下ページを参考にして記述することで、Sheetの内容を取得できたが、記載されているコードがセキュリティ的によろしくない。
https://www.1ft-seabass.jp/memo/2020/05/08/npm-googleapis-google-sheet-await-async/
------------------------------------*/


// Google 公式の npm googleapis
// https://www.npmjs.com/package/googleapis
let {google} = require('googleapis');
 
// ダウンロードしたJSON の鍵ファイルの中身をコピーアンドペースト
// ↓↓↓↓↓↓
// .envから情報を取得に変更！！

// JSON Web Token(JWT)の設定
let jwtClient = new google.auth.JWT(
  process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
  null,
  process.env.GOOGLE_PRIVATE_KEY,
  ['https://www.googleapis.com/auth/spreadsheets',
   'https://www.googleapis.com/auth/drive']
);
 
 
const sheet = '1uriLTaZWMsTg9WfmJazgUPoEQLA4ebvaj6-Vx6dHAPU';
 
// スプレッドシートのセルの指定
let cells = 'A1:C1';
 
// スプレッドシートAPIはv4を使う
let sheets = google.sheets('v4');
 
async function getSheetRequest(){
 
  // JSON Web Token(JWT) の認証
  let resultJwtClient;
  try {
    resultJwtClient = await jwtClient.authorize();
    // console.log(resultJwtClient);
  } catch (error) {
    console.log("Auth Error: " + error);
  }
 
  // シートを読み込む
  let responseGetSheet;
  try {
    responseGetSheet = await sheets.spreadsheets.values.get({
      auth: jwtClient,
      spreadsheetId: sheet,
      range: cells
    });
    console.log(responseGetSheet.data.values);
  } catch (error) {
    console.log('The API returned an error: ' + error);
  }
}
 
// スプレッドシートを読み込む
getSheetRequest();





/*------------------------------------
/   スプレッドシートのインサート
------------------------------------*/




/*------------------------------------
/   サーバーの起動
------------------------------------*/
app.listen(PORT, console.log("Serverが起動しました"));


app.get("/", async (req, res) => {
    // メインの処理を呼び出す
    res.send(data);
});